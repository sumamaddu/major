{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sumamaddu/major/blob/main/10th%20feb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "NThEXYSh_vo3",
        "outputId": "3d05c0ac-7f12-430d-90fe-ddea7b83e972"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n",
            "GPU detected. Using tensorflow-gpu.\n",
            "Collecting tensorflow-gpu\n",
            "  Downloading tensorflow-gpu-2.12.0.tar.gz (2.6 kB)\n",
            "  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n",
            "  \n",
            "  \u001b[31m×\u001b[0m \u001b[32mpython setup.py egg_info\u001b[0m did not run successfully.\n",
            "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n",
            "  \u001b[31m╰─>\u001b[0m See above for output.\n",
            "  \n",
            "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25herror\n",
            "\u001b[1;31merror\u001b[0m: \u001b[1mmetadata-generation-failed\u001b[0m\n",
            "\n",
            "\u001b[31m×\u001b[0m Encountered error while generating package metadata.\n",
            "\u001b[31m╰─>\u001b[0m See above for output.\n",
            "\n",
            "\u001b[1;35mnote\u001b[0m: This is an issue with the package mentioned above, not pip.\n",
            "\u001b[1;36mhint\u001b[0m: See above for details.\n",
            "Found 1447 files belonging to 2 classes.\n",
            "Using 1158 files for training.\n",
            "Found 1447 files belonging to 2 classes.\n",
            "Using 289 files for validation.\n",
            "Found 209 files belonging to 2 classes.\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n",
            "\u001b[1m58889256/58889256\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n",
            "Mixed precision training enabled.\n",
            "Epoch 1/50\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3s/step - accuracy: 0.5745 - loss: 0.9814\n",
            "Epoch 1: val_accuracy improved from -inf to 0.50519, saving model to /content/drive/MyDrive/model/osteoporosis_model.keras\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m184s\u001b[0m 4s/step - accuracy: 0.5759 - loss: 0.9781 - val_accuracy: 0.5052 - val_loss: 0.8434 - learning_rate: 1.0000e-05\n",
            "Epoch 2/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 156ms/step - accuracy: 0.8207 - loss: 0.3857\n",
            "Epoch 2: val_accuracy improved from 0.50519 to 0.58824, saving model to /content/drive/MyDrive/model/osteoporosis_model.keras\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 261ms/step - accuracy: 0.8211 - loss: 0.3860 - val_accuracy: 0.5882 - val_loss: 0.6074 - learning_rate: 1.0000e-05\n",
            "Epoch 3/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 158ms/step - accuracy: 0.8816 - loss: 0.2605\n",
            "Epoch 3: val_accuracy improved from 0.58824 to 0.79585, saving model to /content/drive/MyDrive/model/osteoporosis_model.keras\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 259ms/step - accuracy: 0.8818 - loss: 0.2607 - val_accuracy: 0.7958 - val_loss: 0.4476 - learning_rate: 1.0000e-05\n",
            "Epoch 4/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 159ms/step - accuracy: 0.9128 - loss: 0.2139\n",
            "Epoch 4: val_accuracy improved from 0.79585 to 0.84775, saving model to /content/drive/MyDrive/model/osteoporosis_model.keras\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 255ms/step - accuracy: 0.9129 - loss: 0.2139 - val_accuracy: 0.8478 - val_loss: 0.3692 - learning_rate: 1.0000e-05\n",
            "Epoch 5/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 162ms/step - accuracy: 0.9340 - loss: 0.1667\n",
            "Epoch 5: val_accuracy improved from 0.84775 to 0.87889, saving model to /content/drive/MyDrive/model/osteoporosis_model.keras\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 259ms/step - accuracy: 0.9343 - loss: 0.1665 - val_accuracy: 0.8789 - val_loss: 0.2976 - learning_rate: 1.0000e-05\n",
            "Epoch 6/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 162ms/step - accuracy: 0.9533 - loss: 0.1250\n",
            "Epoch 6: val_accuracy improved from 0.87889 to 0.89965, saving model to /content/drive/MyDrive/model/osteoporosis_model.keras\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 297ms/step - accuracy: 0.9530 - loss: 0.1256 - val_accuracy: 0.8997 - val_loss: 0.2553 - learning_rate: 1.0000e-05\n",
            "Epoch 7/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 162ms/step - accuracy: 0.9765 - loss: 0.0934\n",
            "Epoch 7: val_accuracy improved from 0.89965 to 0.93426, saving model to /content/drive/MyDrive/model/osteoporosis_model.keras\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 271ms/step - accuracy: 0.9762 - loss: 0.0940 - val_accuracy: 0.9343 - val_loss: 0.2132 - learning_rate: 1.0000e-05\n",
            "Epoch 8/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 162ms/step - accuracy: 0.9796 - loss: 0.0750\n",
            "Epoch 8: val_accuracy improved from 0.93426 to 0.94118, saving model to /content/drive/MyDrive/model/osteoporosis_model.keras\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 306ms/step - accuracy: 0.9793 - loss: 0.0755 - val_accuracy: 0.9412 - val_loss: 0.1876 - learning_rate: 1.0000e-05\n",
            "Epoch 9/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 163ms/step - accuracy: 0.9813 - loss: 0.0709\n",
            "Epoch 9: val_accuracy improved from 0.94118 to 0.94810, saving model to /content/drive/MyDrive/model/osteoporosis_model.keras\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 294ms/step - accuracy: 0.9812 - loss: 0.0713 - val_accuracy: 0.9481 - val_loss: 0.1700 - learning_rate: 1.0000e-05\n",
            "Epoch 10/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 163ms/step - accuracy: 0.9851 - loss: 0.0632\n",
            "Epoch 10: val_accuracy did not improve from 0.94810\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 231ms/step - accuracy: 0.9851 - loss: 0.0633 - val_accuracy: 0.9446 - val_loss: 0.1560 - learning_rate: 1.0000e-05\n",
            "Epoch 11/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 165ms/step - accuracy: 0.9801 - loss: 0.0606\n",
            "Epoch 11: val_accuracy did not improve from 0.94810\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 202ms/step - accuracy: 0.9801 - loss: 0.0607 - val_accuracy: 0.9481 - val_loss: 0.1574 - learning_rate: 1.0000e-05\n",
            "Epoch 12/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 168ms/step - accuracy: 0.9891 - loss: 0.0487\n",
            "Epoch 12: val_accuracy improved from 0.94810 to 0.95156, saving model to /content/drive/MyDrive/model/osteoporosis_model.keras\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 271ms/step - accuracy: 0.9890 - loss: 0.0488 - val_accuracy: 0.9516 - val_loss: 0.1369 - learning_rate: 1.0000e-05\n",
            "Epoch 13/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 171ms/step - accuracy: 0.9924 - loss: 0.0408\n",
            "Epoch 13: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 238ms/step - accuracy: 0.9923 - loss: 0.0411 - val_accuracy: 0.9446 - val_loss: 0.1348 - learning_rate: 1.0000e-05\n",
            "Epoch 14/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 175ms/step - accuracy: 0.9942 - loss: 0.0383\n",
            "Epoch 14: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 215ms/step - accuracy: 0.9941 - loss: 0.0384 - val_accuracy: 0.9446 - val_loss: 0.1499 - learning_rate: 1.0000e-05\n",
            "Epoch 15/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 179ms/step - accuracy: 0.9951 - loss: 0.0318\n",
            "Epoch 15: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 219ms/step - accuracy: 0.9950 - loss: 0.0323 - val_accuracy: 0.9516 - val_loss: 0.1309 - learning_rate: 1.0000e-05\n",
            "Epoch 16/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 179ms/step - accuracy: 0.9916 - loss: 0.0376\n",
            "Epoch 16: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 246ms/step - accuracy: 0.9917 - loss: 0.0375 - val_accuracy: 0.9481 - val_loss: 0.1323 - learning_rate: 1.0000e-05\n",
            "Epoch 17/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 175ms/step - accuracy: 0.9933 - loss: 0.0357\n",
            "Epoch 17: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 214ms/step - accuracy: 0.9931 - loss: 0.0358 - val_accuracy: 0.9446 - val_loss: 0.1294 - learning_rate: 1.0000e-05\n",
            "Epoch 18/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 171ms/step - accuracy: 0.9982 - loss: 0.0250\n",
            "Epoch 18: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 210ms/step - accuracy: 0.9981 - loss: 0.0252 - val_accuracy: 0.9481 - val_loss: 0.1244 - learning_rate: 1.0000e-05\n",
            "Epoch 19/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 170ms/step - accuracy: 0.9970 - loss: 0.0234\n",
            "Epoch 19: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 208ms/step - accuracy: 0.9969 - loss: 0.0235 - val_accuracy: 0.9516 - val_loss: 0.1165 - learning_rate: 1.0000e-05\n",
            "Epoch 20/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 170ms/step - accuracy: 0.9980 - loss: 0.0191\n",
            "Epoch 20: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 208ms/step - accuracy: 0.9979 - loss: 0.0193 - val_accuracy: 0.9481 - val_loss: 0.1225 - learning_rate: 1.0000e-05\n",
            "Epoch 21/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 170ms/step - accuracy: 0.9976 - loss: 0.0199\n",
            "Epoch 21: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 209ms/step - accuracy: 0.9976 - loss: 0.0200 - val_accuracy: 0.9481 - val_loss: 0.1175 - learning_rate: 1.0000e-05\n",
            "Epoch 22/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 168ms/step - accuracy: 0.9982 - loss: 0.0164\n",
            "Epoch 22: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 206ms/step - accuracy: 0.9982 - loss: 0.0164 - val_accuracy: 0.9516 - val_loss: 0.1155 - learning_rate: 1.0000e-05\n",
            "Epoch 23/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 170ms/step - accuracy: 1.0000 - loss: 0.0114\n",
            "Epoch 23: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 208ms/step - accuracy: 0.9999 - loss: 0.0117 - val_accuracy: 0.9481 - val_loss: 0.1176 - learning_rate: 1.0000e-05\n",
            "Epoch 24/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 173ms/step - accuracy: 0.9990 - loss: 0.0146\n",
            "Epoch 24: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 212ms/step - accuracy: 0.9990 - loss: 0.0148 - val_accuracy: 0.9446 - val_loss: 0.1149 - learning_rate: 1.0000e-05\n",
            "Epoch 25/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 174ms/step - accuracy: 1.0000 - loss: 0.0101\n",
            "Epoch 25: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 214ms/step - accuracy: 0.9999 - loss: 0.0103 - val_accuracy: 0.9516 - val_loss: 0.1110 - learning_rate: 1.0000e-05\n",
            "Epoch 26/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 175ms/step - accuracy: 0.9982 - loss: 0.0151\n",
            "Epoch 26: val_accuracy did not improve from 0.95156\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 242ms/step - accuracy: 0.9982 - loss: 0.0152 - val_accuracy: 0.9481 - val_loss: 0.1109 - learning_rate: 1.0000e-05\n",
            "Epoch 27/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 174ms/step - accuracy: 0.9989 - loss: 0.0107\n",
            "Epoch 27: val_accuracy improved from 0.95156 to 0.95502, saving model to /content/drive/MyDrive/model/osteoporosis_model.keras\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 335ms/step - accuracy: 0.9988 - loss: 0.0108 - val_accuracy: 0.9550 - val_loss: 0.1074 - learning_rate: 1.0000e-05\n",
            "Epoch 28/50\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 168ms/step - accuracy: 0.9986 - loss: 0.0143\n",
            "Epoch 28: val_accuracy improved from 0.95502 to 0.95848, saving model to /content/drive/MyDrive/model/osteoporosis_model.keras\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 293ms/step - accuracy: 0.9987 - loss: 0.0142 - val_accuracy: 0.9585 - val_loss: 0.1138 - learning_rate: 1.0000e-05\n",
            "Epoch 29/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 170ms/step - accuracy: 1.0000 - loss: 0.0112\n",
            "Epoch 29: val_accuracy did not improve from 0.95848\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 238ms/step - accuracy: 1.0000 - loss: 0.0112 - val_accuracy: 0.9550 - val_loss: 0.1114 - learning_rate: 1.0000e-05\n",
            "Epoch 30/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 175ms/step - accuracy: 0.9969 - loss: 0.0115\n",
            "Epoch 30: val_accuracy did not improve from 0.95848\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 213ms/step - accuracy: 0.9969 - loss: 0.0115 - val_accuracy: 0.9550 - val_loss: 0.1105 - learning_rate: 1.0000e-05\n",
            "Epoch 31/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 172ms/step - accuracy: 0.9988 - loss: 0.0099\n",
            "Epoch 31: val_accuracy did not improve from 0.95848\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 210ms/step - accuracy: 0.9987 - loss: 0.0100 - val_accuracy: 0.9585 - val_loss: 0.1176 - learning_rate: 1.0000e-05\n",
            "Epoch 32/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 173ms/step - accuracy: 1.0000 - loss: 0.0091\n",
            "Epoch 32: val_accuracy did not improve from 0.95848\n",
            "\n",
            "Epoch 32: ReduceLROnPlateau reducing learning rate to 1e-06.\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 211ms/step - accuracy: 1.0000 - loss: 0.0091 - val_accuracy: 0.9585 - val_loss: 0.1112 - learning_rate: 1.0000e-05\n",
            "Epoch 33/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 173ms/step - accuracy: 0.9995 - loss: 0.0088\n",
            "Epoch 33: val_accuracy improved from 0.95848 to 0.96194, saving model to /content/drive/MyDrive/model/osteoporosis_model.keras\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 311ms/step - accuracy: 0.9994 - loss: 0.0089 - val_accuracy: 0.9619 - val_loss: 0.1093 - learning_rate: 1.0000e-06\n",
            "Epoch 34/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 172ms/step - accuracy: 0.9988 - loss: 0.0081\n",
            "Epoch 34: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 210ms/step - accuracy: 0.9988 - loss: 0.0082 - val_accuracy: 0.9619 - val_loss: 0.1091 - learning_rate: 1.0000e-06\n",
            "Epoch 35/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 173ms/step - accuracy: 1.0000 - loss: 0.0067\n",
            "Epoch 35: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 212ms/step - accuracy: 0.9999 - loss: 0.0069 - val_accuracy: 0.9619 - val_loss: 0.1093 - learning_rate: 1.0000e-06\n",
            "Epoch 36/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 173ms/step - accuracy: 1.0000 - loss: 0.0064\n",
            "Epoch 36: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 212ms/step - accuracy: 1.0000 - loss: 0.0064 - val_accuracy: 0.9619 - val_loss: 0.1093 - learning_rate: 1.0000e-06\n",
            "Epoch 37/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 172ms/step - accuracy: 1.0000 - loss: 0.0064\n",
            "Epoch 37: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 240ms/step - accuracy: 1.0000 - loss: 0.0065 - val_accuracy: 0.9619 - val_loss: 0.1094 - learning_rate: 1.0000e-06\n",
            "Epoch 38/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 172ms/step - accuracy: 1.0000 - loss: 0.0071\n",
            "Epoch 38: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 210ms/step - accuracy: 1.0000 - loss: 0.0071 - val_accuracy: 0.9619 - val_loss: 0.1083 - learning_rate: 1.0000e-06\n",
            "Epoch 39/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 173ms/step - accuracy: 0.9995 - loss: 0.0065\n",
            "Epoch 39: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 212ms/step - accuracy: 0.9994 - loss: 0.0066 - val_accuracy: 0.9619 - val_loss: 0.1075 - learning_rate: 1.0000e-06\n",
            "Epoch 40/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 173ms/step - accuracy: 0.9985 - loss: 0.0083\n",
            "Epoch 40: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 212ms/step - accuracy: 0.9984 - loss: 0.0084 - val_accuracy: 0.9619 - val_loss: 0.1069 - learning_rate: 1.0000e-06\n",
            "Epoch 41/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 171ms/step - accuracy: 1.0000 - loss: 0.0081\n",
            "Epoch 41: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 210ms/step - accuracy: 1.0000 - loss: 0.0082 - val_accuracy: 0.9619 - val_loss: 0.1071 - learning_rate: 1.0000e-06\n",
            "Epoch 42/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 172ms/step - accuracy: 1.0000 - loss: 0.0061\n",
            "Epoch 42: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 211ms/step - accuracy: 1.0000 - loss: 0.0062 - val_accuracy: 0.9619 - val_loss: 0.1066 - learning_rate: 1.0000e-06\n",
            "Epoch 43/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 171ms/step - accuracy: 1.0000 - loss: 0.0085\n",
            "Epoch 43: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 239ms/step - accuracy: 1.0000 - loss: 0.0086 - val_accuracy: 0.9619 - val_loss: 0.1067 - learning_rate: 1.0000e-06\n",
            "Epoch 44/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 170ms/step - accuracy: 1.0000 - loss: 0.0069\n",
            "Epoch 44: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 208ms/step - accuracy: 1.0000 - loss: 0.0070 - val_accuracy: 0.9619 - val_loss: 0.1074 - learning_rate: 1.0000e-06\n",
            "Epoch 45/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 172ms/step - accuracy: 1.0000 - loss: 0.0062\n",
            "Epoch 45: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 211ms/step - accuracy: 1.0000 - loss: 0.0063 - val_accuracy: 0.9619 - val_loss: 0.1075 - learning_rate: 1.0000e-06\n",
            "Epoch 46/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 172ms/step - accuracy: 1.0000 - loss: 0.0068\n",
            "Epoch 46: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 211ms/step - accuracy: 1.0000 - loss: 0.0069 - val_accuracy: 0.9619 - val_loss: 0.1075 - learning_rate: 1.0000e-06\n",
            "Epoch 47/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 172ms/step - accuracy: 1.0000 - loss: 0.0064\n",
            "Epoch 47: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 211ms/step - accuracy: 1.0000 - loss: 0.0065 - val_accuracy: 0.9619 - val_loss: 0.1084 - learning_rate: 1.0000e-06\n",
            "Epoch 48/50\n",
            "\u001b[1m36/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 173ms/step - accuracy: 1.0000 - loss: 0.0060\n",
            "Epoch 48: val_accuracy did not improve from 0.96194\n",
            "\u001b[1m37/37\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 211ms/step - accuracy: 1.0000 - loss: 0.0061 - val_accuracy: 0.9619 - val_loss: 0.1082 - learning_rate: 1.0000e-06\n",
            "Epoch 48: early stopping\n",
            "Restoring model weights from the end of the best epoch: 33.\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 5s/step - accuracy: 0.9927 - loss: 0.0406\n",
            "Test Loss: 0.0536\n",
            "Test Accuracy: 0.9856\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        " # Mount Google Drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Install required libraries (installing tensorflow-gpu if available)\n",
        "try:\n",
        "    import tensorflow as tf\n",
        "    # Check for GPU availability\n",
        "    if len(tf.config.list_physical_devices('GPU')) > 0:\n",
        "        print(\"GPU detected. Using tensorflow-gpu.\")\n",
        "        !pip install tensorflow-gpu scikit-learn matplotlib\n",
        "    else:\n",
        "        print(\"No GPU detected. Using regular tensorflow.\")\n",
        "        !pip install tensorflow scikit-learn matplotlib\n",
        "except:\n",
        "    print(\"Error with tensorflow. Using regular tensorflow.\")\n",
        "    !pip install tensorflow scikit-learn matplotlib\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.applications import VGG16\n",
        "from tensorflow.keras.layers import Dense, Flatten, Dropout, BatchNormalization\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\n",
        "import numpy as np\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Data and model parameters\n",
        "IMG_HEIGHT, IMG_WIDTH = 224, 224\n",
        "BATCH_SIZE = 32 # You can try 64 if your GPU has enough memory\n",
        "EPOCHS = 50\n",
        "\n",
        "# Corrected Data Paths\n",
        "TRAIN_DIR = \"/content/drive/MyDrive/Final_ds-20241211T160515Z-001/Final_ds/train\"\n",
        "TEST_DIR = \"/content/drive/MyDrive/Final_ds-20241211T160515Z-001/Final_ds/test\"\n",
        "MODEL_DIR = \"/content/drive/MyDrive/model\"\n",
        "\n",
        "os.makedirs(MODEL_DIR, exist_ok=True)\n",
        "\n",
        "# --- Optimized Data Loading using tf.data ---\n",
        "def preprocess_image(image, label):\n",
        "    image = tf.image.resize(image, [IMG_HEIGHT, IMG_WIDTH])\n",
        "    image = image / 255.0  # Rescale\n",
        "    return image, label\n",
        "\n",
        "train_dataset = tf.keras.utils.image_dataset_from_directory(\n",
        "    TRAIN_DIR,\n",
        "    labels='inferred',\n",
        "    label_mode='categorical',\n",
        "    image_size=(IMG_HEIGHT, IMG_WIDTH),\n",
        "    batch_size=BATCH_SIZE,\n",
        "    validation_split=0.2,\n",
        "    subset='training',\n",
        "    seed=42\n",
        ")\n",
        "validation_dataset = tf.keras.utils.image_dataset_from_directory(\n",
        "    TRAIN_DIR,\n",
        "    labels='inferred',\n",
        "    label_mode='categorical',\n",
        "    image_size=(IMG_HEIGHT, IMG_WIDTH),\n",
        "    batch_size=BATCH_SIZE,\n",
        "    validation_split=0.2,\n",
        "    subset='validation',\n",
        "    seed=42\n",
        ")\n",
        "test_dataset = tf.keras.utils.image_dataset_from_directory(\n",
        "    TEST_DIR,\n",
        "    labels='inferred',\n",
        "    label_mode='categorical',\n",
        "    image_size=(IMG_HEIGHT, IMG_WIDTH),\n",
        "    batch_size=BATCH_SIZE,\n",
        "    shuffle=False # No need to shuffle test data\n",
        ")\n",
        "\n",
        "# Get class names before applying prefetch\n",
        "class_names = train_dataset.class_names  # Store class names here\n",
        "\n",
        "AUTOTUNE = tf.data.AUTOTUNE #Use AUTOTUNE for optimal performance\n",
        "train_dataset = train_dataset.map(preprocess_image, num_parallel_calls=AUTOTUNE).cache().prefetch(buffer_size=AUTOTUNE)\n",
        "validation_dataset = validation_dataset.map(preprocess_image, num_parallel_calls=AUTOTUNE).cache().prefetch(buffer_size=AUTOTUNE)\n",
        "test_dataset = test_dataset.map(preprocess_image, num_parallel_calls=AUTOTUNE).cache().prefetch(buffer_size=AUTOTUNE)\n",
        "\n",
        "# --- End of Optimized Data Loading ---\n",
        "\n",
        "# VGG16 with FNN (Improved Architecture)\n",
        "base_model = VGG16(weights='imagenet', include_top=False, input_shape=(IMG_HEIGHT, IMG_WIDTH, 3))\n",
        "for layer in base_model.layers:\n",
        "    layer.trainable = False\n",
        "\n",
        "x = base_model.output\n",
        "x = Flatten()(x)\n",
        "x = Dense(1024, activation='relu')(x)  # Reduced Dense layer size\n",
        "x = BatchNormalization()(x)  # Added Batch Normalization\n",
        "x = Dropout(0.5)(x)\n",
        "num_classes = len(class_names)  # Access class_names here\n",
        "predictions = Dense(num_classes, activation='softmax')(x)\n",
        "model = Model(inputs=base_model.input, outputs=predictions)\n",
        "\n",
        "# --- Mixed Precision Training (if GPU is available) ---\n",
        "try:\n",
        "    # Enable mixed precision training\n",
        "    tf.keras.mixed_precision.set_global_policy('mixed_float16')\n",
        "    print(\"Mixed precision training enabled.\")\n",
        "except Exception as e:\n",
        "    print(f\"Could not enable mixed precision: {e}\")\n",
        "\n",
        "# --- End of Mixed Precision Training ---\n",
        "\n",
        "# Compile\n",
        "opt = Adam(learning_rate=0.00001)  # Lowered learning rate further\n",
        "model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Callbacks (Improved Callbacks)\n",
        "checkpoint_path = os.path.join(MODEL_DIR, \"osteoporosis_model.keras\")\n",
        "checkpoint = ModelCheckpoint(checkpoint_path, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')\n",
        "early = EarlyStopping(monitor='val_accuracy', patience=15, verbose=1, mode='max', restore_best_weights=True)\n",
        "reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5, min_lr=1e-6, verbose=1)\n",
        "\n",
        "# Train (using tf.data datasets)\n",
        "history = model.fit(\n",
        "    train_dataset,\n",
        "    epochs=EPOCHS,\n",
        "    validation_data=validation_dataset,\n",
        "    callbacks=[checkpoint, early, reduce_lr]\n",
        ")\n",
        "\n",
        "# Evaluate the model\n",
        "loss, accuracy = model.evaluate(test_dataset)\n",
        "print(f\"Test Loss: {loss:.4f}\")\n",
        "print(f\"Test Accuracy: {accuracy:.4f}\")\n",
        "\n",
        "# Save class names\n",
        "np.save(os.path.join(MODEL_DIR, \"class_names.npy\"), class_names)\n",
        "\n",
        "# Plot Training History\n",
        "acc = history.history['accuracy']\n",
        "val_acc = history.history['val_accuracy']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "epochs_range = range(len(acc))\n",
        "\n",
        "plt.figure(figsize=(15, 5))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(epochs_range, acc, label='Training Accuracy')\n",
        "plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n",
        "plt.legend(loc='lower right')\n",
        "plt.title('Training and Validation Accuracy')\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(epochs_range, loss, label='Training Loss')\n",
        "plt.plot(epochs_range, val_loss, label='Validation Loss')\n",
        "plt.legend(loc='upper right')\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "mount_file_id": "1Qj_N6RVpPPdU4MFGxf4oxaEUVkfOC1gL",
      "authorship_tag": "ABX9TyMdwWJ/KTP6VbDv82O8sfoo",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}